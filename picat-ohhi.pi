import util, cp, sat.


% The array representation is 0.2 ms slower than the list representation on average.
board(Board) => Board = 
    /* [[_,_,_,_], */
    /*  [_,_,_,_], */
    /*  [_,_,_,_], */
    /*  [_,_,_,_]]. */
    /* [[_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_]]. */
    /* [[_,_,_,_,_,_,_,_], */
    /*  [0,_,_,_,_,_,_,_], */
    /*  [_,1,1,_,_,0,_,_], */
    /*  [_,_,_,_,_,_,1,1], */
    /*  [_,_,_,1,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,0,_,_,0], */
    /*  [_,_,_,1,_,_,1,_]]. */
    /* {{_,_,_,0,_,_,_,_,_,_,_,0}, */
    /*  {1,_,1,_,_,_,0,_,0,_,_,_}, */
    /*  {_,_,_,_,0,0,_,_,_,1,_,_}, */
    /*  {_,_,_,0,0,_,_,_,_,1,1,_}, */
    /*  {1,_,1,_,_,0,_,0,_,_,_,_}, */
    /*  {_,_,_,_,_,_,_,_,1,_,_,_}, */
    /*  {0,_,_,0,_,_,0,_,_,_,_,1}, */
    /*  {0,_,_,_,_,0,0,_,1,_,0,_}, */
    /*  {_,1,_,_,_,_,_,_,_,_,0,_}, */
    /*  {_,_,_,_,_,_,_,0,_,_,_,_}, */
    /*  {1,_,_,1,1,_,_,_,_,1,_,_}, */
    /*  {1,_,_,_,_,0,_,0,0,_,0,_}}. */
    [[_,_,_,0,_,_,_,_,_,_,_,0],
     [1,_,1,_,_,_,0,_,0,_,_,_],
     [_,_,_,_,0,0,_,_,_,1,_,_],
     [_,_,_,0,0,_,_,_,_,1,1,_],
     [1,_,1,_,_,0,_,0,_,_,_,_],
     [_,_,_,_,_,_,_,_,1,_,_,_],
     [0,_,_,0,_,_,0,_,_,_,_,1],
     [0,_,_,_,_,0,0,_,1,_,0,_],
     [_,1,_,_,_,_,_,_,_,_,0,_],
     [_,_,_,_,_,_,_,0,_,_,_,_],
     [1,_,_,1,1,_,_,_,_,1,_,_],
     [1,_,_,_,_,0,_,0,0,_,0,_]].
    /* [[_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_]]. */
    /* [[_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_]]. */

% three contiguous and equal
no_threes(L), L.length < 3 => true.
no_threes([A, B, C | T]) =>
    (A #\/ B #\/ C) #/\ (#~A #\/ #~B #\/ #~C),
    no_threes([B, C | T]).

% all rows different
vectors_distinct(Board) =>
    M = Board.length,
    foreach (I in 1..M, J in I+1..M)
        scalar_product(Board[I], Board[J], #!=, M)  % add the second vectors_distinct for the cols too
    end.

% Inlining this code loses you 0.02 ms on average.  Why?  I don't know.
print_board(B) =>
    foreach (R in B)
        println(R)
    end,
    nl.

main =>
    board(Board),
    N #= Board.length div 2,
    Board.flatten() :: 0..1,

    foreach (Row in Board)
        sum(Row) #= N,
        no_threes(Row),
    end,

    BoardT = transpose(Board),

    foreach (Col in BoardT)
        sum(Col) #= N,
        no_threes(Col),
    end,

    vectors_distinct(Board),
    vectors_distinct(BoardT),

    Boards = solve_all(Board),
    foreach (B in Boards)
        print_board(B)
    end.

% The more rules a Picat program has, the more time taken to compile it.  Not a good idea to have fluff.
% Keep rules as simple as possible.

% N = 2, 72 solutions.
% N = 3, 4140 solutions.
