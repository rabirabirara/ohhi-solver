import util, datetime, cp, sat.


board(Board) => Board = 
    /* [[_,_,_,_], */
    /*  [_,_,_,_], */
    /*  [_,_,_,_], */
    /*  [_,_,_,_]]. */
    /* [[_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_], */
    /*  [_,_,_,_,_,_]]. */
    [[_,_,_,0,_,_,_,_,_,_,_,0],
     [1,_,1,_,_,_,0,_,0,_,_,_],
     [_,_,_,_,0,0,_,_,_,1,_,_],
     [_,_,_,0,0,_,_,_,_,1,1,_],
     [1,_,1,_,_,0,_,0,_,_,_,_],
     [_,_,_,_,_,_,_,_,1,_,_,_],
     [0,_,_,0,_,_,0,_,_,_,_,1],
     [0,_,_,_,_,0,0,_,1,_,0,_],
     [_,1,_,_,_,_,_,_,_,_,0,_],
     [_,_,_,_,_,_,_,0,_,_,_,_],
     [1,_,_,1,1,_,_,_,_,1,_,_],
     [1,_,_,_,_,0,_,0,0,_,0,_]].

% three contiguous and equal
no_threes(L), L.length < 3 => true.
no_threes([A, B, C | T]) =>
    ((A #\/ B) #\/ C) #/\ (((#~A) #\/ (#~B)) #\/ (#~C)),
    no_threes([B, C | T]).


% all rows different
% main bottleneck, takes hundreds of ms
lists_distinct(Board) =>
    M = Board.length,
    % Every time there is a difference in the vector, produce a 1.
    % If they were all the same, the resulting list comprehension would be 0.
    % Then the sum of the list would be 0, which yields false.
    foreach (I in 1..M, J in I+1..M)
        /* sum([Board[I, K] #= Board[J, K] : K in 1..M]) #< M, */
        /* sum([Board[K, I] #= Board[K, J] : K in 1..M]) #< M, */
        /* sum([Board[I, K] #!= Board[J, K] : K in 1..M]) #> 0, */
        /* sum([Board[K, I] #!= Board[K, J] : K in 1..M]) #> 0, */
        scalar_product(Board[I], Board[J], #!=, M)  % add the second lists_distinct for the cols too
    end.

current_time_seconds() = Time =>
    $time(Hours, Mins, Secs) = current_time(),
    Time = 60*60*Hours + 60*Mins + Secs.
    
main =>
    board(Board),
    N #= Board.length / 2,
    foreach (Row in Board)
        Row :: 0..1
    end,

    % exactly/3 first, then no_threes/1, is faster by a few ms.
    foreach (Row in Board)
        exactly(N, Row, 0),
        no_threes(Row),
    end,

    BoardT = transpose(Board),

    foreach (Col in BoardT)
        exactly(N, Col, 0),
        no_threes(Col),
    end,

    lists_distinct(Board),
    lists_distinct(BoardT),

    Boards = solve_all([], Board),

    foreach (B in Boards)
        foreach (R in B)
            println(R)
        end,
        nl
    end.



% N = 2, 72 solutions.
% N = 3, 4140 solutions.

